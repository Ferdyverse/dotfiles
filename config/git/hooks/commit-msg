#!/usr/bin/env bash

# Define path to custom hooks directory in your HOME
CUSTOM_HOOKS_DIR="$HOME/.config/git/hooks/scripts"

# Source the colors.sh file for color output
source "$CUSTOM_HOOKS_DIR/colors.sh"

# Pattern string to check for
PATTERN_STRING="^(feat|fix|build|chore|docs|style|refactor|perf|test)\(.*\): (.+[^.\r\n])([\r\n]+(.+[\r\n]+)+)?$"

# Output message indicating the hook is running
printf "${CYAN}🛠️  Running commit-msg hook...${RESET}\n"

# Get commit message file
commit_msg_file=$1
commit_msg=$(cat "$commit_msg_file")

# Option to skip the hook
if echo "$commit_msg" | grep -iq "\[skip-hook\]"; then
    printf "${YELLOW}⚠️  Skipping commit-msg hook as requested by [skip-hook] flag.${RESET}\n"
    exit 0
fi

# Check if commit message is empty
if [ -z "$commit_msg" ]; then
    printf "${RED}🚫 Commit message cannot be empty. Please provide a proper commit message.${RESET}\n"
    exit 1
fi

# Fix: Allow merge requests
if echo "$commit_msg" | grep -qE "merge"; then
    exit 0
fi

# Validate commit message against the pattern

if ! echo "$commit_msg" | grep -qE "$PATTERN_STRING"; then
    printf "${RED}🚫 Commit message does not follow the conventional format.${RESET}\n"
    printf "${YELLOW}Requested pattern is: type(scope): subject${RESET}\n"
    printf "Allowed types: feat, fix, build, chore, docs, style, refactor, perf, test\n"
    printf "${GREEN}Example: feat(auth): add support for OAuth login${RESET}\n"

    # Prompt the user to enter a corrected commit message, showing the existing one as a starting point
    printf "\n${YELLOW}Please edit the commit message below (press ENTER to accept each line):${RESET}\n"
    printf "${CYAN}Current message: ${commit_msg}${RESET}\n"
    printf "New message: "
    read -e -i "$commit_msg" new_commit_msg

    # Check if the new commit message is valid
    if ! echo "$new_commit_msg" | grep -qE "$PATTERN_STRING"; then
        printf "${RED}🚫 Corrected commit message still does not follow the conventional format. Aborting commit.${RESET}\n"
        exit 1
    fi

    # Write the corrected commit message back to the file
    echo "$new_commit_msg" >"$commit_msg_file"
fi

# Additional check for WIP messages to prevent unfinished work from being committed
if echo "$commit_msg" | grep -iq "wip"; then
    printf "${RED}🚫 Commit message contains 'WIP'. Please complete your work before committing.${RESET}\n"
    exit 1
fi

# Output message indicating the hook is done
printf "${GREEN}✅ Done with commit-msg hook.${RESET}\n"
